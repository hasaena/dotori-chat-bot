
class Node(object):
    def __init__(self, tag, value, start_mark, end_mark):
        self.tag = tag
        self.value = value
        self.start_mark = start_mark
        self.end_mark = end_mark
    def __repr__(self):
        value = self.value
        #if isinstance(value, list):
         뒤에 "REDACTED_OPENAI_KEY"로 치환if len(value) == 0:
         뒤에 "REDACTED_OPENAI_KEY"로 치환    value = '<empty>'
         뒤에 "REDACTED_OPENAI_KEY"로 치환elif len(value) == 1:
         뒤에 "REDACTED_OPENAI_KEY"로 치환    value = '<1 item>'
         뒤에 "REDACTED_OPENAI_KEY"로 치환else:
         뒤에 "REDACTED_OPENAI_KEY"로 치환    value = '<%d items>' % len(value)
        #else:
         뒤에 "REDACTED_OPENAI_KEY"로 치환if len(value) > 75:
         뒤에 "REDACTED_OPENAI_KEY"로 치환    value = repr(value[:70]+u' ... ')
         뒤에 "REDACTED_OPENAI_KEY"로 치환else:
         뒤에 "REDACTED_OPENAI_KEY"로 치환    value = repr(value)
        value = repr(value)
        return '%s(tag=%r, value=%s)' % (self.__class__.__name__, self.tag, value)

class ScalarNode(Node):
    id = 'scalar'
    def __init__(self, tag, value,
            start_mark=None, end_mark=None, style=None):
        self.tag = tag
        self.value = value
        self.start_mark = start_mark
        self.end_mark = end_mark
        self.style = style

class CollectionNode(Node):
    def __init__(self, tag, value,
            start_mark=None, end_mark=None, flow_style=None):
        self.tag = tag
        self.value = value
        self.start_mark = start_mark
        self.end_mark = end_mark
        self.flow_style = flow_style

class SequenceNode(CollectionNode):
    id = 'sequence'

class MappingNode(CollectionNode):
    id = 'mapping'

